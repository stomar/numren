#!/usr/bin/ruby -w
# test_numren: Unit tests for the numren script.
#
# Copyright (C) 2011-2012 Marcus Stollsteimer

require 'test/unit'
load 'numren'

PROGNAME    = 'test_numren'
PROGVERSION = '0.0.1'


class String_is_i_Test < Test::Unit::TestCase

  def test_valid_integers
    assert('3'.is_i?)
    assert('01'.is_i?)
    assert('42'.is_i?)
    assert('123'.is_i?)
    assert('0'.is_i?)
  end

  def test_non_integers
    assert('A'.is_i? == false)
    assert('0A'.is_i? == false)
    assert('A0'.is_i? == false)
    assert(''.is_i? == false)
  end

  def test_signed_integers
    assert('+5'.is_i?)
    assert('-2'.is_i?)
    assert('+02'.is_i?)
    assert('1+2'.is_i? == false)
    assert('3-2'.is_i? == false)
  end
end


class FilenameTest < Test::Unit::TestCase

  def test_well_formed_names
    assert_nothing_raised { Numren::Filename.new('01_Sample.dat') }
    assert_nothing_raised { Numren::Filename.new('01_02_Sample.dat') }
    assert_nothing_raised { Numren::Filename.new('00_Sample.dat') }
  end

  def test_for_missing_parts
    assert_raises(ArgumentError) { Numren::Filename.new('Sample.dat') }
    assert_raises(ArgumentError) { Numren::Filename.new('_Sample.dat') }
    assert_raises(ArgumentError) { Numren::Filename.new('01_') }
  end

  def test_for_first_parts_that_are_not_a_number
    assert_raises(ArgumentError) { Numren::Filename.new('AB_Sample.dat') }
    assert_raises(ArgumentError) { Numren::Filename.new('0A_Sample.dat') }
    assert_raises(ArgumentError) { Numren::Filename.new('A0_Sample.dat') }
  end

  def test_to_s
    assert_equal('01_Sample.dat', Numren::Filename.new('01_Sample.dat').to_s)
  end

  def test_set_number
    fn = Numren::Filename.new('01_Sample.dat')
    fn.set_number 2      # a number
    assert_equal('02_Sample.dat', fn.to_s)
    fn.set_number '001'  # a string
    assert_equal('001_Sample.dat', fn.to_s)
  end

  def test_set_number_increase
    fn = Numren::Filename.new('01_Sample.dat')
    fn.set_number '+2'
    assert_equal('03_Sample.dat', fn.to_s)
    fn.set_number '+101'
    assert_equal('104_Sample.dat', fn.to_s)
  end

  def test_set_number_decrease
    fn = Numren::Filename.new('11_Sample.dat')
    fn.set_number '-2'
    assert_equal('09_Sample.dat', fn.to_s)
    assert_raises(RuntimeError) { fn.set_number '-10' }
    fn.set_number '-9'
    assert_equal('00_Sample.dat', fn.to_s)
  end

  def test_set_number_increase_decrease
    # see if number of digits is set correctly
    fn = Numren::Filename.new('99_Sample.dat')
    fn.set_number '+1'
    assert_equal('100_Sample.dat', fn.to_s)
    fn.set_number '-1'
    assert_equal('099_Sample.dat', fn.to_s)
  end

  def test_set_digits
    fn = Numren::Filename.new('010_Sample.dat')
    assert_equal('010_Sample.dat', fn.to_s)

    res = fn.set_digits(2)
    assert_equal('10_Sample.dat', fn.to_s)
    assert(res == true)

    res = fn.set_digits(2)
    assert_equal('10_Sample.dat', fn.to_s)
    assert(res == true)

    res = fn.set_digits(1)
    assert_equal('10_Sample.dat', fn.to_s)
    assert(res == false)
  end
end


class OptionparserTest < Test::Unit::TestCase

  def test_defaults
    options = Numren::Optionparser.parse!(['01_Sample.txt', '02_Sample.txt', '+10'])
    expected = {
      :files => ['01_Sample.txt', '02_Sample.txt'],
      :number => '+10',
      :digits => nil
    }
    assert_equal(expected, options)
  end

  def test_digits_option
    options = Numren::Optionparser.parse!(['-d', '1', '01_Sample.txt', '02_Sample.txt'])
    expected = {
      :files => ['01_Sample.txt', '02_Sample.txt'],
      :number => nil,
      :digits => 1
    }
    assert_equal(expected, options)
  end

  def test_invalid_digits
    assert_raises(OptionParser::InvalidArgument) { Numren::Optionparser.parse!(['-d', '0.5', '01_Sample.txt']) }
    assert_raises(OptionParser::InvalidArgument) { Numren::Optionparser.parse!(['-d',   '0', '01_Sample.txt']) }
    assert_raises(OptionParser::InvalidArgument) { Numren::Optionparser.parse!(['-d',  '-1', '01_Sample.txt']) }
  end

  def test_wrong_number_of_arguments
    assert_raises(ArgumentError) { Numren::Optionparser.parse!(['01_Sample.txt']) }
    assert_raises(ArgumentError) { Numren::Optionparser.parse!(['']) }
    assert_raises(ArgumentError) { Numren::Optionparser.parse!([]) }
    assert_raises(ArgumentError) { Numren::Optionparser.parse!(['-d', '1']) }
  end

  def test_invalid_options
    assert_raises(OptionParser::InvalidOption) { Numren::Optionparser.parse!(['-x']) }
  end
end
